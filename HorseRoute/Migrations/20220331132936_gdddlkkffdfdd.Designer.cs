// <auto-generated />
using System;
using HorseRoute.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HorseRoute.Migrations
{
    [DbContext(typeof(HorseRouteContext))]
    [Migration("20220331132936_gdddlkkffdfdd")]
    partial class gdddlkkffdfdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HorseRoute.Entities.Adresse", b =>
                {
                    b.Property<Guid>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            AdresseId = new Guid("d28888e9-2ba9-473a-a40f-e38cba4f9b35"),
                            Address = "4961 Bettie Ports",
                            City = "Conway",
                            Country = "Oman",
                            Latitude = -122.514899,
                            Longitude = 47.168135999999997,
                            PostalCode = "57669"
                        },
                        new
                        {
                            AdresseId = new Guid("202f0289-8d5d-4d86-83b1-d06fbe44d938"),
                            Address = "38832 Nia Wells",
                            City = "Rapid City",
                            Country = "Macedonia",
                            Latitude = 49.244136321879409,
                            Longitude = 0.72070626561467233,
                            PostalCode = "28664"
                        },
                        new
                        {
                            AdresseId = new Guid("707d2bc8-ee71-418a-86da-f5bc0827c3aa"),
                            Address = "38832 Nia Wells",
                            City = "Rapid City",
                            Country = "Macedonia",
                            Latitude = 48.425946851524181,
                            Longitude = 3.3519433690499678,
                            PostalCode = "28664"
                        },
                        new
                        {
                            AdresseId = new Guid("1e9aec0c-6008-442f-9602-e0c2632c6894"),
                            Address = "2bis Place Bir-Hakeim",
                            City = "Rennes",
                            Country = "France",
                            Latitude = 48.092463805175349,
                            Longitude = -1.6676154192630999,
                            PostalCode = "35200"
                        },
                        new
                        {
                            AdresseId = new Guid("122db83d-e9eb-4202-ab45-f0d83c8c2269"),
                            Address = "12 Rue Mirepoix",
                            City = "Toulouse",
                            Country = "France",
                            Latitude = 43.604435000000002,
                            Longitude = 1.4417690000000001,
                            PostalCode = "31000"
                        },
                        new
                        {
                            AdresseId = new Guid("a380bc80-d9ec-44b8-baa3-02cb0e13dfcc"),
                            Address = "34 Rue du Docteur Schweitzer",
                            City = "Chaumont",
                            Country = "France",
                            Latitude = 48.103270660394628,
                            Longitude = 5.1379911058195349,
                            PostalCode = "52000"
                        },
                        new
                        {
                            AdresseId = new Guid("426d6f39-15a4-431b-bc42-3b4e22114e66"),
                            Address = "45 ter Rue de Brest",
                            City = "Saint-Brieuc",
                            Country = "France",
                            Latitude = 48.513644158133374,
                            Longitude = -2.7696866456014724,
                            PostalCode = "22000"
                        });
                });

            modelBuilder.Entity("HorseRoute.Entities.Trajet", b =>
                {
                    b.Property<Guid>("TrajetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdresseEndId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdresseStartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSits")
                        .HasColumnType("int");

                    b.Property<string>("CheckPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayFlexibility")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("TrajetDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TrajetId");

                    b.HasIndex("AdresseEndId");

                    b.HasIndex("AdresseStartId")
                        .IsUnique();

                    b.HasIndex("DriverUserId");

                    b.ToTable("Trajets");

                    b.HasData(
                        new
                        {
                            TrajetId = new Guid("8e92d2b1-47e1-4cf1-8116-f4bcc3d2ee47"),
                            AdresseEndId = new Guid("122db83d-e9eb-4202-ab45-f0d83c8c2269"),
                            AdresseStartId = new Guid("1e9aec0c-6008-442f-9602-e0c2632c6894"),
                            AvailableSits = 2,
                            CheckPoints = "1.44176&!&3.604435,1.44178&!&3.604175,1.44068&!&3.60403,1.44152&!&3.602814,1.44098&!&3.602274,1.43969&!&3.60154,1.43928&!&3.600913,1.44053&!&3.599617,1.43424&!&3.598452,1.43003&!&3.598977,1.42830&!&3.607434,1.42006&!&3.610462,1.41991&!&3.611483,1.41778&!&3.61198,1.42487&!&3.652874,1.28088&!&3.959931,1.12588&!&4.054807,0.87687&!&4.056294,0.33340&!&4.230212,0.16875&!&4.422126,-0.10109&!&4.534486,-0.19061&!&4.530808,-0.35034&!&4.588226,-0.55615&!&4.773932,-0.50998&!&4.879623,-0.42714&!&5.004509,-0.60347&!&5.385948,-0.58952&!&5.59825,-0.6721&!&5.75865,-0.55811&!&5.942187,-0.52682&!&6.140017,-0.45208&!&6.218145,-0.37537&!&6.296393,-0.30576&!&6.342944,-0.4093&!&6.418978,-0.66486&!&6.391449,-1.07382&!&6.533246,-1.16698&!&6.753252,-1.51433&!&7.17231,-1.51476&!&7.173754,-1.61282&!&7.182343,-1.59366&!&7.264545,-1.59145&!&7.264752,-1.5860&!&7.265937,-1.65444&!&7.34045,-1.62796&!&7.605261,-1.71524&!&7.747104,-1.67508&!&8.076938,-1.67480&!&8.081259,-1.67483&!&8.082261,-1.67484&!&8.082855,-1.67420&!&8.092082,-1.67274&!&8.091947,-1.66748&!&8.091315,-1.66780&!&8.092225,-1.66750&!&8.092342",
                            CreationDate = new DateTime(2022, 3, 31, 15, 29, 35, 811, DateTimeKind.Local).AddTicks(5425),
                            DayFlexibility = 5,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Diam maecenas sed enim ut sem viverra aliquet. Vestibulum rhoncus est pellentesque elit ullamcorper dignissim. Elementum curabitur vitae nunc sed velit. Magna ac placerat vestibulum lectus mauris ultrices eros in. In aliquam sem fringilla ut morbi tincidunt augue interdum.",
                            DriverUserId = new Guid("d28888e9-2ba9-473a-a40f-e38cba4f9b35"),
                            Price = 12.4,
                            TrajetDate = new DateTime(2022, 3, 31, 15, 29, 35, 811, DateTimeKind.Local).AddTicks(3799)
                        },
                        new
                        {
                            TrajetId = new Guid("18f2c44a-68c4-4a64-af9a-b01fe23fd684"),
                            AdresseEndId = new Guid("426d6f39-15a4-431b-bc42-3b4e22114e66"),
                            AdresseStartId = new Guid("a380bc80-d9ec-44b8-baa3-02cb0e13dfcc"),
                            AvailableSits = 1,
                            CheckPoints = "-2.76931&!&8.513815,-2.7677&!&8.512438,-2.76624&!&8.51188,-2.75934&!&8.51097,-2.75916&!&8.510895,-2.7570&!&8.510288,-2.75553&!&8.51215,-2.74340&!&8.511894,-2.48762&!&8.453014,-2.10715&!&8.219692,-1.74746&!&8.127747,-1.6034&!&8.149907,-1.57282&!&8.120779,-1.18120&!&8.069991,-0.7818&!&8.115861,-0.19548&!&8.00273,0.13645&!&8.039945,0.47707&!&8.076238,1.10383&!&8.243031,1.3952&!&8.33488,1.54798&!&8.460667,1.9100&!&8.544276,2.17451&!&8.652571,2.39893&!&8.62624,2.40128&!&8.632301,2.52736&!&8.631937,2.61833&!&8.593836,2.73647&!&8.58165,2.99608&!&8.384932,3.15259&!&8.363731,3.28910&!&8.270651,3.38997&!&8.234578,3.95072&!&8.271368,4.32860&!&8.169018,4.57636&!&8.170854,4.77589&!&8.114233,4.78775&!&8.116152,4.78260&!&8.094829,4.92559&!&8.080552,4.92578&!&8.080805,4.96114&!&8.074352,5.06010&!&8.100775,5.10919&!&8.10879,5.11871&!&8.111242,5.12698&!&8.109499,5.12721&!&8.109238,5.12780&!&8.109199,5.12772&!&8.10839,5.13037&!&8.104859,5.13085&!&8.105284,5.13304&!&8.105198,5.13971&!&8.104125,5.13995&!&8.103383,5.13844&!&8.103166",
                            CreationDate = new DateTime(2022, 3, 31, 15, 29, 35, 811, DateTimeKind.Local).AddTicks(7022),
                            DayFlexibility = 0,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Diam maecenas sed enim ut sem viverra aliquet. Vestibulum rhoncus est pellentesque elit ullamcorper dignissim. Elementum curabitur vitae nunc sed velit. Magna ac placerat vestibulum lectus mauris ultrices eros in. In aliquam sem fringilla ut morbi tincidunt augue interdum.",
                            DriverUserId = new Guid("707d2bc8-ee71-418a-86da-f5bc0827c3aa"),
                            Price = 16.0,
                            TrajetDate = new DateTime(2022, 3, 31, 15, 29, 35, 811, DateTimeKind.Local).AddTicks(6973)
                        });
                });

            modelBuilder.Entity("HorseRoute.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegisterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d28888e9-2ba9-473a-a40f-e38cba4f9b35"),
                            Active = true,
                            FirstName = "William",
                            LastName = "L. Collette",
                            Mail = "WilliamLCollette@dayrep.com",
                            Password = "aiM1Oogei",
                            Pseudo = "Asher",
                            RegisterDate = new DateTimeOffset(new DateTime(1942, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Tel = "253-272-0514"
                        },
                        new
                        {
                            UserId = new Guid("202f0289-8d5d-4d86-83b1-d06fbe44d938"),
                            Active = true,
                            FirstName = "David",
                            LastName = "B. Cotton",
                            Mail = "DavidBCotton@armyspy.com",
                            Password = "que2puT9Ui2",
                            Pseudo = "Moures",
                            RegisterDate = new DateTimeOffset(new DateTime(1967, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Tel = "308-879-2411"
                        },
                        new
                        {
                            UserId = new Guid("707d2bc8-ee71-418a-86da-f5bc0827c3aa"),
                            Active = true,
                            FirstName = "David",
                            LastName = "B.",
                            Mail = "fdfd@armyspy.com",
                            Password = "fd9Ui2",
                            Pseudo = "Kiev",
                            RegisterDate = new DateTimeOffset(new DateTime(1967, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Tel = "308-879-24451"
                        });
                });

            modelBuilder.Entity("HorseRoute.Entities.UserTrajet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrajetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("TrajetId");

                    b.ToTable("UserTrajets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d3a96c9-298b-4e57-99e3-109af0f6b688"),
                            PassengerId = new Guid("707d2bc8-ee71-418a-86da-f5bc0827c3aa"),
                            TrajetId = new Guid("8e92d2b1-47e1-4cf1-8116-f4bcc3d2ee47")
                        },
                        new
                        {
                            Id = new Guid("e4a715d4-3ed6-400d-878e-9ac63b821224"),
                            PassengerId = new Guid("d28888e9-2ba9-473a-a40f-e38cba4f9b35"),
                            TrajetId = new Guid("8e92d2b1-47e1-4cf1-8116-f4bcc3d2ee47")
                        });
                });

            modelBuilder.Entity("HorseRoute.Entities.Trajet", b =>
                {
                    b.HasOne("HorseRoute.Entities.Adresse", "AdresseEnd")
                        .WithMany()
                        .HasForeignKey("AdresseEndId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HorseRoute.Entities.Adresse", "AdresseStart")
                        .WithOne("Trajet")
                        .HasForeignKey("HorseRoute.Entities.Trajet", "AdresseStartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HorseRoute.Entities.User", "DriverUser")
                        .WithMany()
                        .HasForeignKey("DriverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HorseRoute.Entities.User", b =>
                {
                    b.HasOne("HorseRoute.Entities.Adresse", "Adresse")
                        .WithOne("User")
                        .HasForeignKey("HorseRoute.Entities.User", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("HorseRoute.Entities.UserTrajet", b =>
                {
                    b.HasOne("HorseRoute.Entities.User", "Passenger")
                        .WithMany("UserTrajets")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HorseRoute.Entities.Trajet", "Trajet")
                        .WithMany("UserTrajets")
                        .HasForeignKey("TrajetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
